name: Build and Publish Ansible Collection

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  ANSIBLE_VERSION: 'latest'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint

    - name: Validate collection structure
      run: |
        if [ ! -f galaxy.yml ]; then
          echo "Error: galaxy.yml not found"
          exit 1
        fi
        echo "Collection structure validation passed"
        
        # Validate galaxy.yml syntax
        python -c "import yaml; yaml.safe_load(open('galaxy.yml'))"
        echo "galaxy.yml syntax validation passed"

    - name: Run ansible-lint
      continue-on-error: true
      run: |
        if command -v ansible-lint >/dev/null 2>&1; then
          ansible-lint . || echo "ansible-lint found issues (non-blocking)"
        else
          echo "ansible-lint not available, skipping"
        fi

    - name: Build collection
      run: |
        ansible-galaxy collection build . --force
        echo "Build completed successfully"
        ls -la *.tar.gz

    - name: Install and test collection
      run: |
        # Install the built collection for testing
        ansible-galaxy collection install ./*.tar.gz --force
        
        # Basic import test
        python -c "
        try:
            import ansible_collections
            print('Collection import test passed')
        except ImportError as e:
            print(f'Collection import test failed: {e}')
            exit(1)
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: collection-build-${{ github.run_id }}
        path: |
          *.tar.gz
          *.log
        retention-days: 7

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Verify publish script exists
      run: |
        if [ ! -f ./build-and-publish.sh ]; then
          echo "Error: build-and-publish.sh script not found"
          exit 1
        fi

    - name: Make script executable
      run: chmod +x ./build-and-publish.sh

    - name: Build and publish collection
      env:
        ANSIBLE_GALAXY_TOKEN: ${{ secrets.ANSIBLE_GALAXY_TOKEN }}
      run: ./build-and-publish.sh

    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: publish-logs-${{ github.run_id }}
        path: |
          *.log
          *.tar.gz
        retention-days: 30

  release:
    needs: publish
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download publish artifacts
      uses: actions/download-artifact@v4
      with:
        name: publish-logs-${{ github.run_id }}
        path: ./artifacts

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          # Ansible Collection Release ${{ github.ref_name }}
          
          This release has been automatically built and published to Ansible Galaxy.
          
          ## Changes
          - Version ${{ steps.version.outputs.version }}
          - Built with Ansible ${{ env.ANSIBLE_VERSION }}
          - Python ${{ env.PYTHON_VERSION }}
          
          ## Installation
          ```bash
          ansible-galaxy collection install namespace.collection_name:${{ steps.version.outputs.version }}
          ```
          
          See the [Ansible Galaxy page](https://galaxy.ansible.com/) for more details.
        draft: false
        prerelease: false
        files: |
          ./artifacts/*.tar.gz